---
title: "EIA API - US48 Demand for Electricity Data Refresh"
format:
  html:
    code-fold: false
jupyter: python3 
---



```{python}
#| label: load libraries
import eia_api
import os
import datetime
import numpy as np
import pandas as pd
import plotly.graph_objects as go
from pathlib import Path
from ydata_profiling import ProfileReport
```


```{python}
log_file = pd.read_csv("data/us48_metadata.csv")

cols_time = log_file.columns[3:8]
log_file[cols_time] = log_file[cols_time].apply(pd.to_datetime)
print(log_file.dtypes)

log_file.head

```


```{python}
meta_file = log_file[log_file["success"] == True] 
meta_file = meta_file[meta_file["index"] == meta_file["index"].max()]

end_act = meta_file["end_act"]
print(end_act)

```

```{python}
start = end_act + datetime.timedelta(hours = 1)
start = datetime.datetime.strptime(str(start.iloc[0]), "%Y-%m-%d %H:%M:%S")
start
```


```{python}
api_path = "electricity/rto/region-data/data"
facets = {
    "respondent": "US48",
    "type": "D"
}

offset = 2250

eia_api_key = os.getenv('EIA_API_KEY')
```



```{python}
metadata = eia_api.eia_metadata(api_key = eia_api_key, api_path = "electricity/rto/region-data/")
```

```{python}
print(metadata.meta["endPeriod"])
end_api = datetime.datetime.strptime(metadata.meta["endPeriod"], "%Y-%m-%dT%H")
type(end_api)
```

```{python}
print(start)
print(end_api)
```

```{python}
if start < end_api:
    print("Updates available")
    df = eia_api.eia_get(api_key = eia_api_key, 
        api_path = api_path, 
        facets = facets, 
        start = start,
        end = end_api) 
    update_flag = True
    if(len(df.data) > 0):
        start_match_flag = df.data["period"].min() == start
        end_match_flag = df.data["period"].max() == end_api
        start_act = df.data["period"].min()
        end_act = df.data["period"].max()
        n_obs = len(df.data)
        na = df.data["value"].isna().sum()
        if start_match_flag and end_match_flag and na == 0 and n_obs > 0:
            print("Refresh successed")
            success_flag = True
        else:
            success_flag = False
            print("Refresh failed")
    else:
        print("Refresh failed")
        success_flag = False
        start_match_flag = None
        end_match_flag = None
        start_act = None
        end_act = None
        n_obs = None
        na = None
        
else:
    print("No updates are available...")
    update_flag = False
    success_flag = False
    start_match_flag = None
    end_match_flag = None
    start_act = None
    end_act = None
    n_obs = None
    na = None

```


```{python}
if success_flag:
    print(df.data)
```

```{python}
log = {
    "index": log_file["index"].max() + 1,
    "respondent": "US48",
    "respondent_type": "Demand",
    "time": datetime.datetime.now(),
    "start": start,
    "end": end_api,
    "start_act": start_act,
    "end_act": end_act,
    "start_match": start_match_flag, 
    "end_match": end_match_flag, 
    "n_obs": n_obs,
    "na": na,
    "type": "refresh",
    "update": update_flag,
    "success": success_flag

}

log_file_new = pd.DataFrame([log])

log_file_new
```

```{python}
if (success_flag):
    print("Save the data into CSV file")
    data = pd.read_csv("data/us48.csv")
    new_data = data._append(df.data)
    new_data.to_csv("data/us48.csv", index = False)
    print("Save the metadata into CSV file")
    new_log = log_file._append(log_file_new)
    new_log.to_csv("data/us48_metadata.csv", index = False)
else:
    if not update_flag:
       print("Updates are not available")
    elif update_flag and not success_flag:
        print("Fail to refresh the data, check the log...")
    new_log = log_file._append(log_file_new)
    new_log.to_csv("data/us48_metadata.csv", index = False)

```

```{python}
new_log
```